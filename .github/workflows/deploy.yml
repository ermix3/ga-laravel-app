name: Deploy Laravel Backend

on:
  push:
    branches:
      - main

env:
  REGISTRY: docker.io
  IMAGE_NAME: laravel-backend
  SHORT_SHA: ${{ github.sha }}
  DB_DATABASE: laravel
  DB_USERNAME: laravel
  NETWORK_NAME: fullstack-network

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set short SHA
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Check and install Docker on remote server
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << EOF

            export NETWORK_NAME=${{ env.NETWORK_NAME }}

            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              echo "Docker not found. Installing Docker..."
              apt-get update
              apt-get install -y ca-certificates curl gnupg
              install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              chmod a+r /etc/apt/keyrings/docker.gpg
              echo "deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
              apt-get update
              apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              echo "Docker installed successfully."
            else
              echo "Docker is already installed."
            fi

            # Check if Docker Compose is installed
            if ! command -v docker compose &> /dev/null && ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose not found. Installing Docker Compose..."
              apt-get update
              apt-get install -y docker-compose-plugin

              # If the plugin fails, try the standalone version as fallback
              if ! command -v docker compose &> /dev/null; then
                echo "Installing standalone Docker Compose as fallback..."
                curl -SL https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
              fi

              echo "Docker Compose installed successfully."
            else
              echo "Docker Compose is already installed."
            fi

            echo "Create backend, backend_data directories if doesn't exist"
            mkdir -p /backend/backend_data

            # Ensuring Docker network exists...
            if ! docker network inspect "$NETWORK_NAME" >/dev/null 2>&1; then
              echo "Creating Docker network: $NETWORK_NAME"
              docker network create "$NETWORK_NAME"
            else
              echo "Network $NETWORK_NAME already exists."
            fi

            echo "Remove unused images to free disk space"
            docker image prune -af
          EOF

      - name: Copy docker compose and config to server
        run: |
          # Copy the files
          scp -o StrictHostKeyChecking=no docker-compose.prod.yml root@${{ secrets.SERVER_IP }}:/backend/docker-compose.prod.yml
          scp -o StrictHostKeyChecking=no db-entrypoint.sh root@${{ secrets.SERVER_IP }}:/backend/db-entrypoint.sh
          scp -o StrictHostKeyChecking=no db-backup.sh root@${{ secrets.SERVER_IP }}:/backend/db-backup.sh

          # Set executable permissions on scripts
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} "chmod +x /backend/db-entrypoint.sh /backend/db-backup.sh"

      - name: Create .env file on server
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
            cat > /backend/.env << 'EOT'
          APP_NAME=${{ secrets.APP_NAME }}
          APP_KEY=
          APP_ENV=production
          APP_DEBUG=false
          APP_URL=http://${{ secrets.SERVER_IP }}

          APP_LOCALE=en
          APP_FALLBACK_LOCALE=en
          APP_FAKER_LOCALE=en_US

          APP_MAINTENANCE_DRIVER=file
          # APP_MAINTENANCE_STORE=database

          PHP_CLI_SERVER_WORKERS=4

          BCRYPT_ROUNDS=12

          LOG_CHANNEL=stack
          LOG_STACK=single
          LOG_DEPRECATIONS_CHANNEL=null
          LOG_LEVEL=debug

          DB_CONNECTION=mysql
          DB_HOST=db
          DB_PORT=3306
          DB_DATABASE=${{ env.DB_DATABASE }}
          DB_USERNAME=${{ env.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          SESSION_DRIVER=database
          SESSION_LIFETIME=120
          SESSION_ENCRYPT=false
          SESSION_PATH=/
          SESSION_DOMAIN=null

          BROADCAST_CONNECTION=log
          FILESYSTEM_DISK=local
          QUEUE_CONNECTION=sync

          CACHE_STORE=database
          # CACHE_PREFIX=

          MEMCACHED_HOST=127.0.0.1

          REDIS_CLIENT=phpredis
          REDIS_HOST=redis
          REDIS_PASSWORD=null
          REDIS_PORT=6379

          MAIL_MAILER=log
          MAIL_SCHEME=null
          MAIL_HOST=127.0.0.1
          MAIL_PORT=2525
          MAIL_USERNAME=null
          MAIL_PASSWORD=null
          MAIL_FROM_ADDRESS="hello@example.com"
          MAIL_FROM_NAME="${APP_NAME}"

          AWS_ACCESS_KEY_ID=
          AWS_SECRET_ACCESS_KEY=
          AWS_DEFAULT_REGION=us-east-1
          AWS_BUCKET=
          AWS_USE_PATH_STYLE_ENDPOINT=false

          VITE_APP_NAME="${APP_NAME}"
          EOT
          EOF

      - name: Deploy Backend via SSH
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
            cd /backend

            export DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
            export IMAGE_NAME=${{ env.IMAGE_NAME }}
            export APP_NAME=${{ secrets.APP_NAME }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export DB_DATABASE=${{ env.DB_DATABASE }}
            export DB_USERNAME=${{ env.DB_USERNAME }}
            export DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}

            # Set docker compose command
            if command -v docker compose &> /dev/null; then
              DOCKER_COMPOSE="docker compose"
            elif command -v docker-compose &> /dev/null; then
              DOCKER_COMPOSE="docker-compose"
            else
              echo "ERROR: Docker Compose is not installed!"
              exit 1
            fi

            echo "Using Docker Compose command: $DOCKER_COMPOSE"

            echo "=== Starting Zero-Downtime Deployment ==="

            echo "Pull the latest image"
            docker pull ${{ env.REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

            # Check if this is the first deployment
            if ! $DOCKER_COMPOSE -f docker-compose.prod.yml ps | grep -q "${APP_NAME}_backend"; then
              echo "First deployment detected - starting services normally..."
              $DOCKER_COMPOSE -f docker-compose.prod.yml up -d

              # Wait for services to be ready
              echo "Waiting for services to start..."
              sleep 30

              echo "Generating application key..."
              $DOCKER_COMPOSE -f docker-compose.prod.yml exec -T backend php artisan key:generate

              echo "Running database migrations..."
              $DOCKER_COMPOSE -f docker-compose.prod.yml exec -T backend php artisan migrate --force

              echo "First deployment completed successfully!"
              exit 0
            fi

            echo "Existing deployment detected - performing zero-downtime update..."

            # Create a backup of current container
            CURRENT_CONTAINER="${APP_NAME}_backend"
            BACKUP_CONTAINER="${APP_NAME}_backend_backup"

            echo "Creating backup of current container..."
            docker rename $CURRENT_CONTAINER $BACKUP_CONTAINER 2>/dev/null || true

            # Start new container with updated image
            echo "Starting new container with latest image..."
            $DOCKER_COMPOSE -f docker-compose.prod.yml up -d backend

            # Wait for new container to be ready
            echo "Waiting for new container to be ready..."
            RETRY_COUNT=0
            MAX_RETRIES=30

            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if docker exec ${APP_NAME}_backend php artisan --version >/dev/null 2>&1; then
                echo "New container is responding to artisan commands"
                break
              fi
              echo "Waiting for container to be ready... (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
              sleep 2
              RETRY_COUNT=$((RETRY_COUNT + 1))
            done

            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "ERROR: New container failed to start properly"
              echo "Rolling back to previous container..."

              # Stop the failed new container
              docker stop ${APP_NAME}_backend 2>/dev/null || true
              docker rm ${APP_NAME}_backend 2>/dev/null || true

              # Restore backup container
              docker rename $BACKUP_CONTAINER $CURRENT_CONTAINER
              docker start $CURRENT_CONTAINER

              echo "Rollback completed. Deployment failed."
              exit 1
            fi

            echo "Generating application key..."
            $DOCKER_COMPOSE -f docker-compose.prod.yml exec -T backend php artisan key:generate

            echo "Running database migrations on new container..."
            if ! $DOCKER_COMPOSE -f docker-compose.prod.yml exec -T backend php artisan migrate --force; then
              echo "ERROR: Migration failed"
              echo "Rolling back to previous container..."

              # Stop the new container
              docker stop ${APP_NAME}_backend
              docker rm ${APP_NAME}_backend

              # Restore backup container
              docker rename $BACKUP_CONTAINER $CURRENT_CONTAINER
              docker start $CURRENT_CONTAINER

              echo "Rollback completed due to migration failure."
              exit 1
            fi

            # Health check on new container
            echo "Performing health check..."
            HEALTH_CHECK_RETRIES=0
            MAX_HEALTH_RETRIES=10

            while [ $HEALTH_CHECK_RETRIES -lt $MAX_HEALTH_RETRIES ]; do
              # Check if Laravel is responding (you can customize this check)
              if docker exec ${APP_NAME}_backend php artisan route:list >/dev/null 2>&1; then
                echo "Health check passed!"
                break
              fi
              echo "Health check attempt $((HEALTH_CHECK_RETRIES + 1))/$MAX_HEALTH_RETRIES failed, retrying..."
              sleep 3
              HEALTH_CHECK_RETRIES=$((HEALTH_CHECK_RETRIES + 1))
            done

            if [ $HEALTH_CHECK_RETRIES -eq $MAX_HEALTH_RETRIES ]; then
              echo "ERROR: Health check failed after $MAX_HEALTH_RETRIES attempts"
              echo "Rolling back to previous container..."

              # Stop the failed container
              docker stop ${APP_NAME}_backend
              docker rm ${APP_NAME}_backend

              # Restore backup container
              docker rename $BACKUP_CONTAINER $CURRENT_CONTAINER
              docker start $CURRENT_CONTAINER

              echo "Rollback completed due to health check failure."
              exit 1
            fi

            # Clean up backup container if deployment successful
            echo "Deployment successful! Cleaning up backup container..."
            docker stop $BACKUP_CONTAINER 2>/dev/null || true
            docker rm $BACKUP_CONTAINER 2>/dev/null || true

            # Ensure all services are running
            echo "Ensuring all services are running..."
            $DOCKER_COMPOSE -f docker-compose.prod.yml up -d

            # Clear Laravel caches for good measure
            echo "Clearing Laravel caches..."
            $DOCKER_COMPOSE -f docker-compose.prod.yml exec -T backend php artisan config:clear
            $DOCKER_COMPOSE -f docker-compose.prod.yml exec -T backend php artisan route:clear
            $DOCKER_COMPOSE -f docker-compose.prod.yml exec -T backend php artisan view:clear

            # Clean up old images to save space
            echo "Cleaning up old Docker images..."
            docker image prune -af

            echo "=== Zero-Downtime Deployment Completed Successfully ==="

            # Display deployment info
            echo "Deployment Summary:"
            echo "- Image: ${{ env.REGISTRY }}/${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
            echo "- SHA: $SHORT_SHA"
            echo "- Container: ${APP_NAME}_backend"
            echo "- Status: $(docker inspect --format='{{.State.Status}}' ${APP_NAME}_backend)"
          EOF
